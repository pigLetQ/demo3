import { Sort } from '../common/constant';
import type { LookupAggregateParam, ReplaceRootParam, SampleAggregateParam, UnwindParam } from '../typing';
import type { AggregateCommand, QueryChainCommand } from './AbstractCommand';
export declare class AggregatePipeline {
    private readonly pipeline;
    constructor();
    addFields(fields: Record<string, any | AggregateCommand>): this;
    count(field: string): this;
    match(match: QueryChainCommand): this;
    group(group: object): this;
    project(project: Record<string, boolean | 0 | 1 | object | AggregateCommand>): this;
    replaceRoot(root: ReplaceRootParam): this;
    sample(sample: SampleAggregateParam): this;
    lookup(lookup: LookupAggregateParam): this;
    sort(sort: Record<string, Sort | 1 | -1>): this;
    limit(limit: number): this;
    skip(skip: number): this;
    unwind(unwind: string | UnwindParam): this;
    done(): ({
        $match: any;
        $sort?: undefined;
    } | {
        [x: string]: any;
        $match?: undefined;
        $sort?: undefined;
    } | {
        $sort: {};
        $match?: undefined;
    })[];
    private pushStage;
}
