import { AndAggregateCommand } from './aggregate/and';
import { AvgAggregateCommand } from './aggregate/avg';
import { CountAggregateCommand } from './aggregate/count';
import { EqAggregateCommand } from './aggregate/eq';
import { AggregatePipeline } from './AggregatePipeline';
import { ExprCommand } from './query/expr';
import { GtAggregateCommand } from './aggregate/gt';
import { GteAggregateCommand } from './aggregate/gte';
import { LtAggregateCommand } from './aggregate/lt';
import { LteAggregateCommand } from './aggregate/lte';
import { MaxAggregateCommand } from './aggregate/max';
import { MinAggregateCommand } from './aggregate/min';
import { NeqAggregateCommand } from './aggregate/neq';
import { OrAggregateCommand } from './aggregate/or';
import { SumAggregateCommand } from './aggregate/sum';
import { SetCommand } from './update/set';
import { IncCommand } from './update/inc';
import { AggregateCommand, QueryCommand } from './AbstractCommand';
import { QueryChain } from './query/QueryChain';
export declare class AggregateCommandFactory {
    pipeline(): AggregatePipeline;
    avg(val: string | AggregateCommand): AvgAggregateCommand;
    count(): CountAggregateCommand;
    max(val: string | AggregateCommand): MaxAggregateCommand;
    min(val: string | AggregateCommand): MinAggregateCommand;
    sum(val: string | number | AggregateCommand): SumAggregateCommand;
    and(cmd: Array<object | AggregateCommand>): AndAggregateCommand;
    and(...cmd: Array<object | AggregateCommand>): AndAggregateCommand;
    or(cmd: Array<object | AggregateCommand>): OrAggregateCommand;
    or(...cmd: Array<object | AggregateCommand>): OrAggregateCommand;
    eq(val: [any, any]): EqAggregateCommand;
    neq(val: [any, any]): NeqAggregateCommand;
    lt(val: [any, any]): LtAggregateCommand;
    lte(val: [any, any]): LteAggregateCommand;
    gt(val: [any, any]): GtAggregateCommand;
    gte(val: [any, any]): GteAggregateCommand;
}
export declare class Command {
    aggregate: AggregateCommandFactory;
    constructor();
    set(data: object): SetCommand;
    inc(num: number): IncCommand;
    expr(cmd: AggregateCommand): ExprCommand;
    and(cmd: Array<object | QueryCommand | QueryChain>): QueryChain;
    and(...cmd: Array<object | QueryCommand | QueryChain>): QueryChain;
    or(cmd: Array<object | QueryCommand | QueryChain>): QueryChain;
    or(...cmd: Array<object | QueryCommand | QueryChain>): QueryChain;
    not(cmd: QueryCommand | QueryChain): QueryChain;
    nor(cmd: Array<object | QueryCommand | QueryChain>): QueryChain;
    nor(...cmd: Array<object | QueryCommand | QueryChain>): QueryChain;
    eq(val: any): QueryChain;
    neq(val: any): QueryChain;
    lt(val: any): QueryChain;
    lte(val: any): QueryChain;
    gt(val: any): QueryChain;
    gte(val: any): QueryChain;
    in(val: any[]): QueryChain;
    nin(val: any[]): QueryChain;
    exists(exists: boolean): QueryChain;
    mod(divisor: number, remainder: number): QueryChain;
    all(val: any[]): QueryChain;
    elemMatch(cmd: object | QueryChain | QueryCommand): QueryChain;
    size(size: number): QueryChain;
}
